version: '3.8'

services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
    environment:
      discovery.type: single-node
      xpack.security.enabled: false
      xpack.security.enrollment.enabled: false
    ports:
      - "9200:9200"
    networks:
      - spring-demo

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.1
    ports:
      - "5601:5601"
  redis:
    image: redis:7.4.2
    container_name: redis-cache
    ports:
      - "6379:6379"
    networks:
      - spring-demo
  debezium-init:
    image: curlimages/curl:latest
    container_name: debezium-init
    depends_on:
      - connect
    volumes:
      - ./kafka/init:/kafka/init
    entrypoint: [ "/bin/sh", "-c", "/kafka/init/init-debezium.sh" ]
    networks:
      - spring-demo

  postgres:
    container_name: postgres-sql-itsm
    image: ankane/pgvector:latest
    environment:
      POSTGRES_USER: itsm
      POSTGRES_PASSWORD: itsm
      POSTGRES_DB: itsm_thales
      PGDATA: /var/lib/postgresql/data
    volumes:
      - postgres:/var/lib/postgresql/data
      - ./init-user-db.sql:/docker-entrypoint-init db.d
    ports:
      - "5432:5432"
    networks:
      - spring-demo
    restart: unless-stopped
    command: >
      postgres -c wal_level=logical
               -c max_wal_senders=5
               -c max_replication_slots=5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - spring-demo

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"  # ← expose pour accès depuis l'extérieur
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - spring-demo

  connect:
    image: debezium/connect:2.5
    container_name: debezium-connect
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: debezium_connect_config
      OFFSET_STORAGE_TOPIC: debezium_connect_offsets
      STATUS_STORAGE_TOPIC: debezium_connect_status
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_PLUGIN_PATH: /kafka/connect,/usr/share/java
    depends_on:
      - kafka
      - postgres
    networks:
      - spring-demo

  mail-dev:
    container_name: mail-dev-bsn
    image: maildev/maildev
    ports:
      - "1080:1080"
      - "1025:1025"
    networks:
      - spring-demo

networks:
  spring-demo:
    driver: bridge

volumes:
  postgres:
    driver: local
