version: '3.8'

services:
  ollama-init:
    image: curlimages/curl
    depends_on:
      - ollama
    entrypoint: >
      sh -c "
        curl -X POST http://ollama:11434/api/pull -d '{\"name\": \"llama3\"}' &&
        curl -X POST http://ollama:11434/api/pull -d '{\"name\": \"llama3:8b\"}'
      "
    networks:
      - spring-demo

  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - spring-demo
    restart: unless-stopped

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
    restart: unless-stopped
    networks:
      - spring-demo


  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.1
    ports:
      - "5601:5601"
    networks:
      - spring-demo

  redis:
    image: redis:7.4.2
    container_name: redis-cache
    ports:
      - "6379:6379"
    networks:
      - spring-demo

  debezium-init:
    image: curlimages/curl:latest
    container_name: debezium-init
    depends_on:
      - connect
    volumes:
      - ./kafka/init:/kafka/init
    entrypoint: [ "/bin/sh", "-c", "/init-debezium.sh" ]
    networks:
      - spring-demo

  postgres:
    container_name: postgres-sql-itsm
    image: ankane/pgvector:latest
    environment:
      POSTGRES_USER: itsm
      POSTGRES_PASSWORD: itsm
      POSTGRES_DB: itsm_thales
      PGDATA: /var/lib/postgresql/data
    volumes:
      - postgres:/var/lib/postgresql/data
      - ./init-user-db.sql:/docker-entrypoint-initdb.d/init-user-db.sql
    ports:
      - "5432:5432"
    networks:
      - spring-demo
    restart: unless-stopped
    command: >
      postgres -c wal_level=logical
               -c max_wal_senders=5
               -c max_replication_slots=5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - spring-demo
  itsm-api:
    container_name: itsm-api
    image: mohamedihebtbessi2001/itsm-api:1.0.0
    ports:
      - "8090:8090"
    networks:
      - spring-demo
    depends_on:
      - postgres
      - ollama
      - redis
      - kafka
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-sql-itsm:5432/itsm_thales
      - SPRING_REDIS_HOST=redis
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - EMAIL_HOST_NAME: ${EMAIL_HOST_NAME}
      - EMAIL_USER_NAME: ${EMAIL_USER_NAME}
      - EMAIL_PASSWORD: ${EMAIL_PASSWORD}
  itsm-ui:
    container_name: itsm-ui
    image: mohamedihebtbessi2001/itsm-ui:0.0.0
    depends_on:
      - itsm-api
    ports:
      - "8080:80" 
    networks:
      - spring-demo
  chat-bot:
    container_name: chatbot-itsm
    image: chatbot/chatbot:1.0.0
    ports:
      - "5000:5000"
    networks:
      - spring-demo

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"  
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - spring-demo

  connect:
    image: debezium/connect:2.5
    container_name: debezium-connect
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: debezium_connect_config
      OFFSET_STORAGE_TOPIC: debezium_connect_offsets
      STATUS_STORAGE_TOPIC: debezium_connect_status
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_PLUGIN_PATH: /kafka/connect,/usr/share/java
    depends_on:
      - kafka
      - postgres
    networks:
      - spring-demo

  mail-dev:
    container_name: mail-dev-bsn
    image: maildev/maildev
    ports:
      - "1080:1080"
      - "1025:1025"
    networks:
      - spring-demo

  sonarqube:
    image: sonarqube:10.4-community
    container_name: sonarqube
    depends_on:
      - postgres
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://localhost:5432/itsm_thales
      SONAR_JDBC_USERNAME: itsm
      SONAR_JDBC_PASSWORD: itsm
    ports:
      - "9000:9000"
    networks:
      - spring-demo
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    restart: unless-stopped

networks:
  spring-demo:
    driver: bridge

volumes:
  postgres:
    driver: local
  sonarqube_data:
    driver: local
  sonarqube_extensions:
    driver: local
  sonarqube_logs:
    driver: local
  ollama_data:
    driver: local
